// --------------------------------------------------
// Global mixins
// --------------------------------------------------

// box shadow

@mixin box-shadow {
  box-shadow: 0 0 8px 0 rgba($color-black, .05);
}

// circle

@mixin circle ($size) {
  @include square($size);
  border-radius: ($size / 2);
}

// clearfix

@mixin clearfix {
  &::before,
  &::after {
    content: '';
    display: table;
  }

  &::after {
    clear: both;
  }
}

// ellipsis

@mixin ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// expand

@mixin expand {
  @include square(100%);
}

// fade in on hover

@mixin fade-in-on-hover ($opacity: .4) {
  opacity: $opacity;

  @include hover {
    opacity: 1;
  }
}

// fade out on hover

@mixin fade-out-on-hover ($opacity: .4) {
  @include hover {
    opacity: $opacity;
  }
}

// hardware acceleration

@mixin ha {
  backface-visibility: hidden;
  transform: translate3d(0, 0, 0);
}

// hover

@mixin hover {
  &:hover {
    @content;
  }
}

// overlay

@mixin overlay ($position: absolute) {
  @include expand;
  left: 0;
  position: $position;
  top: 0;
}

// reset list

@mixin reset-list {
  list-style: none;
  margin: 0;
  padding-left: 0;
}

// reset button

@mixin reset-button {
  background: none;
  border: 0;
  display: inline-block;
  padding: 0;
}

// square

@mixin square ($size) {
  height: $size;
  width: $size;
}

// table-cell

@mixin table-cell {
  display: table-cell;
  vertical-align: middle;
}

// triangle

@mixin triangle ($color: $color-black, $direction: top, $width: 10px, $height: 10px) {
  @include square(0);
  transform: rotate(360deg);
  @if $direction == top or $direction == bottom {
    border-left: ($width / 2) solid transparent;
    border-right: ($width / 2) solid transparent;
  }
  @if $direction == left or $direction == right {
    border-bottom: ($width / 2) solid transparent;
    border-top: ($width / 2) solid transparent;
  }
  @if $direction == top {
    border-bottom: $height solid $color;
  }
  @if $direction == bottom {
    border-top: $height solid $color;
  }
  @if $direction == left {
    border-right: $height solid $color;
  }
  @if $direction == right {
    border-left: $height solid $color;
  }
}

// transition

@mixin transition ($property: all, $duration: .2s, $ease: ease-in-out) {
  transition: $property $duration $ease;
}

// vertical margins

@mixin vertical-margins ($bottom: $gutter-medium, $top: $bottom) {
  margin-bottom: $bottom;
  margin-top: $top;

  &:first-child {
    margin-top: 0;
  }

  &:last-child {
    margin-bottom: 0;
  }
}

// rem font size

@mixin rem-font-size ($fs, $lh: null) {
  $rem: (($fs / 16) * 1rem);
  font-size: $rem;

  @if $lh {
    line-height: ($lh / $fs);
  }

  .no-boxshadow & {
    font-size: ($fs) + px;
  }
}

// em font size

@mixin em-font-size ($fs, $lh: null) {
  $em: (($fs / 16) * 1em);
  font-size: $em;

  @if $lh {
    line-height: ($lh / $fs);
  }
}

@mixin rem ($property, $values-list) {
  $px: ();
  $rem: ();

  @each $value in $values-list {
    @if $value == 0 or $value == auto {
      $px: append($px, $value);
      $rem: append($rem, $value);
    } @else {
      $unit: unit($value);

      @if $unit == 'px' {
        $px: append($px, $value);
        $rem: append($rem, px-to-rem($value));
      }

      @if $unit == 'rem' {
        $px: append($px, rem-to-px($value));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}


@mixin icomoon {
  font-family: 'icomoon' !important;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  line-height: 1;
  speak: none;
  text-transform: none;
}

@mixin absolute {
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
}
